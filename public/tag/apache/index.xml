<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Apache on David Moreno blog</title>
    <link>https://damog.net/blog/tag/apache/</link>
    <description>Recent content in Apache on David Moreno blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 07 Aug 2009 17:32:02 +0000</lastBuildDate>
    
	<atom:link href="https://damog.net/blog/tag/apache/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Phusion Passenger™ on Debian</title>
      <link>https://damog.net/blog/2009/08/07/phusion-passenger-on-debian/</link>
      <pubDate>Fri, 07 Aug 2009 17:32:02 +0000</pubDate>
      
      <guid>https://damog.net/blog/2009/08/07/phusion-passenger-on-debian/</guid>
      <description>During DebConf 9 I had the opportunity to work together with Señor Micah to try to bring Passenger back to shape and get it back to the NEW queue on Debian. We spent way too much time dealing with the build for the pkg-ruby-extras build model than to the actual fixing and updating. At the end we came up with a very well updated and DFSG-compatible (in contrast to the one that Brightbox provides, which isn&amp;rsquo;t bad either to be honest) package for the 2.</description>
    </item>
    
    <item>
      <title>Run a PHP script from mod_perl so PerlCleanupHandler can be used</title>
      <link>https://damog.net/blog/2009/02/19/run-a-php-script-from-mod_perl-so-perlcleanuphandler-can-be-used/</link>
      <pubDate>Thu, 19 Feb 2009 19:21:44 +0000</pubDate>
      
      <guid>https://damog.net/blog/2009/02/19/run-a-php-script-from-mod_perl-so-perlcleanuphandler-can-be-used/</guid>
      <description>Situation
You need to run a time consuming task after a PHP script is run. The task will have to reuse the POST/GET data that is being sent to the service. The task would have to be done once the client has gone away.
Solution
Use mod_perl&amp;rsquo;s PerlFixupHandler to take the POST data, set the handler to be run by mod_php (or whatever else you are running it). Finally, use PerlCleanupHandler to run that task since that&amp;rsquo;s exactly what that phase is for, once the client went away.</description>
    </item>
    
    <item>
      <title>And now Apache2::EmbedMP3 for your songs collections!</title>
      <link>https://damog.net/blog/2009/02/02/and-now-apache2embedmp3-for-your-songs-collections/</link>
      <pubDate>Mon, 02 Feb 2009 15:01:52 +0000</pubDate>
      
      <guid>https://damog.net/blog/2009/02/02/and-now-apache2embedmp3-for-your-songs-collections/</guid>
      <description>After I spent time working on Apache2::EmbedFLV, I thought it was a good idea to do the same for audio files, specifically MP3 files.
So now that you have your MP3 files on your web server and they are accessible to the world, you may want to show them with an embedded audio player. Well, Apache2::EmbedMP3 is exactly for you!
EmbedMP3 uses the fabulous WP Audio Player, a small, elegant, GPL Flash audio player, similarly to how Apache2::EmbedFLV uses Flowplayer.</description>
    </item>
    
    <item>
      <title>Introducing Apache2::EmbedFLV – Exposing FLVs with Flowplayer and a customized interface</title>
      <link>https://damog.net/blog/2009/01/17/introducing-apache2embedflv-exposing-flvs-with-flowplayer-and-a-customized-interface/</link>
      <pubDate>Sat, 17 Jan 2009 18:22:43 +0000</pubDate>
      
      <guid>https://damog.net/blog/2009/01/17/introducing-apache2embedflv-exposing-flvs-with-flowplayer-and-a-customized-interface/</guid>
      <description>Situation
You have a bunch of Flash videos, FLV files. Every once in a while you dump new files on your publicly accessible Apache directory. You would like to give your users the ability to play those FLVs within a webpage you provide, instead of just serving them the files for a direct download. Maybe you want this for all FLVs, not only an specific directory.
Solution
Apache2::EmbedFLV!
&amp;lt;Files ~ &amp;quot;\.</description>
    </item>
    
    <item>
      <title>FeatherCast: Apache Software Foundation /unofficial/ podcast</title>
      <link>https://damog.net/blog/2009/01/17/feathercast-apache-software-foundation-/unofficial/-podcast/</link>
      <pubDate>Sat, 17 Jan 2009 14:41:32 +0000</pubDate>
      
      <guid>https://damog.net/blog/2009/01/17/feathercast-apache-software-foundation-/unofficial/-podcast/</guid>
      <description>I recently stumbled upon FeatherCast, a nice little project made by Rich Bowen and David Reid, the former, a recognized documenter within the Apache community, author of a few books on the webserver, mainly the Apache Cookbook. FeatherCast is an unofficial podcast; its primary goal is supporting the Apache Software Foundation community. I&amp;rsquo;ve found it to be greatly interesting, modern and up to date; more recently, bringing lights to some of the content and people, for instance, featured on ApacheCon, which took place in New Orleans, LA, late last year.</description>
    </item>
    
    <item>
      <title>Returning an specific HTTP status/return code and content with mod_perl 2</title>
      <link>https://damog.net/blog/2009/01/06/returning-an-specific-http-status/return-code-and-content-with-mod_perl-2/</link>
      <pubDate>Tue, 06 Jan 2009 11:35:12 +0000</pubDate>
      
      <guid>https://damog.net/blog/2009/01/06/returning-an-specific-http-status/return-code-and-content-with-mod_perl-2/</guid>
      <description>Making a simple PerlResponseHandler that does something like this: sub handler { my($r) = shift; $r-&amp;gt;content_type(&amp;ldquo;text/plain&amp;rdquo;); $r-&amp;gt;print(&amp;ldquo;You suck.\n&amp;rdquo;); return Apache2::Const::HTTP_BAD_REQUEST; } &amp;hellip;doesn&amp;rsquo;t make what you&amp;rsquo;d be expecting. This is because mod_perl assumes, since you are specifying content type and something to print, that this is a legit and valid (200-ish) request. This is what you get:  POST http://myserver/resource &amp;ndash;&amp;gt; 200 OK Connection: close Date: Mon, 05 Jan 2009 23:02:57 GMT Content-Type: text/plain; charset=UTF-8 Client-Date: Mon, 05 Jan 2009 23:03:00 GMT Client-Response-Num: 1 Client-Transfer-Encoding: chunked [ some headers snipped ]</description>
    </item>
    
    <item>
      <title>DirectoryIndex and the &#34;perl-script&#34; handler</title>
      <link>https://damog.net/blog/2008/12/02/directoryindex-and-the-perl-script-handler/</link>
      <pubDate>Tue, 02 Dec 2008 12:12:40 +0000</pubDate>
      
      <guid>https://damog.net/blog/2008/12/02/directoryindex-and-the-perl-script-handler/</guid>
      <description>Wouter Verhelst blogs about combining ScriptAlias (or a way to run CGIs) and DirectoryIndex in Apache.
Recently, developing a TinyURL clone I had a similar (not identical, though) issue.
Basically, I set SetHandler to perl-script on the &#34;/&#34; location, which basically means, everything accessed on a given virtual host, is affected. Because you are changing the handler for the entire location, DirectoryIndex will have no effect on it because mod_dir is the one dealing with the DirectoryIndex function, that is, using the DIR_MAGIC_TYPE handler.</description>
    </item>
    
  </channel>
</rss>